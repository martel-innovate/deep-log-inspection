version: '3.3'
services:

    zookeeper:
        image: zookeeper:3.3
        restart: on-failure
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints:
                  - node.hostname == deeplogmanager
            restart_policy:
                condition: on-failure

    kafka:
        image: monasca/kafka:0.9.0.1-2.11
        environment:
            ZOOKEEPER_CONNECTION_STRING: "zookeeper:2181"
            KAFKA_HOSTNAME_FROM_IP: "false"
            KAFKA_ADVERTISED_HOST_NAME: "kafka"
            KAFKA_AUTO_CREATE_TOPICS: "false"
            KAFKA_DELETE_TOPIC_ENABLE: "true"
            KAFKA_CREATE_TOPICS: "\
                monasca-log:64:1,logstash-log:64:1,\
                kafka-health:16:1"
        depends_on:
            - zookeeper
        restart: on-failure
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints:
                  - node.hostname == deeplogmanager
            restart_policy:
                condition: on-failure

    monasca-log-api:
        image: martel/monasca-log-api
        volumes:
            - ./monasca-log-api/config:/etc/monasca
            - /etc/letsencrypt/live/deeplogmanager.lab.fiware.org/fullchain.pem:/etc/letsencrypt/fullchain.pem
            - /etc/letsencrypt/live/deeplogmanager.lab.fiware.org/privkey.pem:/etc/letsencrypt/privkey.pem
        ports:
            - "8090:8090"
        depends_on:
            - kafka
        restart: on-failure
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints:
                  - node.hostname == deeplogmanager
            restart_policy:
                condition: on-failure

    # statsd:
    #     image: everydayhero/statsd
    #     ports:
    #         - "8125:8125/tcp"
    #         - "8125:8125/udp"
    #     restart: on-failure
    #     deploy:
    #         mode: replicated
    #         replicas: 1
    #         placement:
    #             constraints:
    #               - node.hostname == deeplogmanager
    #         restart_policy:
    #             condition: on-failure

    log-transformer:
        image: martel/log-transformer
        environment:
            LS_JAVA_OPTS: "-Xmx256m -Xms256m"
        volumes:
            - ./log-transformer/config/logstash.yml:/usr/share/logstash/config/logstash.yml
            - ./log-transformer/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
        depends_on:
          - kafka
        restart: on-failure
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints:
                  - node.hostname == deeplogmanager
            restart_policy:
                condition: on-failure

    log-persister:
        image: martel/log-persister
        environment:
            LS_JAVA_OPTS: "-Xmx256m -Xms256m"
        environment:
            - LOGSTASH_USER
            - LOGSTASH_PW
        volumes:
            - ./log-persister/config/logstash.yml:/usr/share/logstash/config/logstash.yml
            - ./log-persister/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
        depends_on:
            - kafka
            - elasticsearch
        restart: on-failure
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints:
                  - node.hostname == deeplogmanager
            restart_policy:
                condition: on-failure

    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:5.4.3
        environment:
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        volumes:
            - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
            - esdata:/usr/share/elasticsearch/data
            - eslogs:/usr/share/elasticsearch/logs
        ports:
          - "9200:9200"
          - "9300:9300"
        ulimits:
            memlock:
                soft: -1
                hard: -1
            nofile: 1048576
            nproc: -1
        restart: on-failure
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints:
                  - node.hostname == deeplogmanager
            resources:
                limits:
                    memory: 1g
            restart_policy:
                condition: on-failure

    kibana:
        image: docker.elastic.co/kibana/kibana:5.4.3
        environment:
            - ELASTICSEARCH_PASSWORD=${KIBANA_PW}
        volumes:
          - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
          - /etc/letsencrypt/live/deeplogmanager.lab.fiware.org/fullchain.pem:/etc/letsencrypt/fullchain.pem
          - /etc/letsencrypt/live/deeplogmanager.lab.fiware.org/privkey.pem:/etc/letsencrypt/privkey.pem
        ports:
          - "443:5601"
        depends_on:
          - elasticsearch
        restart: on-failure
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints:
                  - node.hostname == deeplogmanager
            restart_policy:
                condition: on-failure

volumes:
    esdata:
        driver: local
    eslogs:
        driver: local
